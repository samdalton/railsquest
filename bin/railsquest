#!/usr/bin/env ruby

lib = File.expand_path('../../lib/', __FILE__)
$:.unshift lib unless $:.include?(lib)

require 'railsquest'

Thread.abort_on_exception = true

Railsquest.setup! if !Railsquest.setup?
Railsquest.check_git!
Railsquest.check_git_config!

parent_process_pid = Process.pid
pids = []
at_exit do 
  if Process.pid == parent_process_pid
    pids.each do |pid| 
      Process.kill("TERM", pid) rescue nil
      sleep 0.2
    end
  end
end

case ARGV.first

when nil
  pids << Railsquest.serve_web!
  pids << Railsquest.serve_git!
  pids << Railsquest.advertise!
  Process.waitall

when "add", "init"
  repo = Railsquest.add!(ARGV[1] || File.expand_path("."))

when "remove", "rm"
  name = ARGV[1]

  if !name || name.empty?
    abort "You need to specify the name of the quest you'd like to remove:\n#{File.basename($0)} remove <path>"
  elsif !(repo = Railsquest::Quest.for_name(name))
    abort "#{name.inspect} is not a valid quest name"
  end

  repo.remove!

when "clone"
  if ARGV[1].nil? || ARGV[1].empty?
    abort "You need to specify the path to the quest you'd like to clone:\n$ railsquest clone <path>"
  end
  repo = Railsquest.clone!(ARGV[1], ARGV[2])

when "help", "--help", "-h"
  puts <<-HELP
Usage: #{File.basename($0)} [<command>]

Commands:
  none               - Start the web, git and bonjour serving
  add [path]         - Add an existing git repo to railsquest
  remove <name>      - Remove a repo 
  clone <url> [path] - Clone a remote repo and add it to railsquest
  help
  version
HELP

when "version", "--version", "-v"
  puts "railsquest version #{Railsquest::VERSION}"

else
  abort "Say what? Try: #{File.basename($0)} help"
end